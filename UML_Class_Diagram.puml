@startuml


    class MainActivity {
        - seedsCount: TextView
        - logoTapCount: int
        - lastTapTime: long
        + onCreate(Bundle): void
        + onStart(): void
        + onResume(): void
        + updateSeeds(): void
        + createLesson(...): void
        + createLesson(...): View
        - initPrefabs(): ChapterData
    }

    class "MainActivity.Memory" as Memory {
        - PREF: String
        + setCurrentChapter(Context, String): void
        + getCurrentChapter(Context): String
        + reset(Context): void
        + getSeeds(Context): int
        + setSeeds(Context, int): void
        + isLessonCompleted(Context, String): boolean
        + setLessonCompleted(Context, String, boolean): void
    }

    class LessonActivity {
        - seeds: int
        - levels: *
        - currentIndex: int
        - failureCount: int
        - currentLessonNumber: String
        + getFailureCount(): int
        + incrementFailureCount(): void
        + onSaveInstanceState(outState: Bundle): void
        + onCreate(savedInstanceState: Bundle): void
        - loadLevels(): *
        + onLevelFailed(failedIndex: int): void
        - showLevel(index: int): void
        + goToNextLevel(): void
    }

    enum "LessonActivity.LevelType" as LevelType {
        MULTIPLE_CHOICE
        FILL_IN_THE_BLANK
        CODE_PATTERN
    }

    class "LessonActivity.LessonLevel" as LessonLevel {
        - id: String
        - type: LevelType
        - question: String
        - options: *
        - correctAnswer: String
        - correctAnswers: *
        - textClue: String
        - failureCount: int
        + getId(): String
        + getType(): LevelType
        + getQuestion(): String
        + getCorrectAnswer(): String
        + getCorrectAnswers(): *
        + getTextClue(): String
        + getOptions(): *
        + incrementFailureCount(): void
        + getFailureCount(): int
    }

    class "LessonLevel.Rewards" as Rewards {
        - reward: int
        + getReward(): int
        + setReward(newReward: int): void
    }

    class SplashActivity
    class ChaptersFragment {
      - context: Context
      - chapterViews: List<ChapterViewHolder>
      + ChaptersFragment()
      + onCreateView(inflater: LayoutInflater, container: ViewGroup, savedInstanceState: Bundle): View
      + onViewCreated(view: View, savedInstanceState: Bundle): void
      - initPrefabs(): Prefabs.ChapterData
      - loadChapters(view: View): void
    }
    class DeveloperOptionsFragment

    MainActivity ..> DeveloperOptionsFragment : starts
    DeveloperOptionsFragment --> MainActivity : interacts
    DeveloperOptionsFragment --> Memory : interacts

    class FillInTheBlankFragment {
        - question: String
        - correctAnswer: String
        - textClue: String
        - wasAnswerCorrect: boolean
        - currentLessonLevel: int
        + newInstance(String, String, String, int): FillInTheBlankFragment
        + onCreate(Bundle): void
        + onCreateView(LayoutInflater, ViewGroup, Bundle): View
        - getRandomSuccessMessage(): String
        - getRoundedDrawable(int): GradientDrawable
    }


    FillInTheBlankFragment --> MainActivity : uses (seeds)
    FillInTheBlankFragment --> LessonActivity : interacts
    FillInTheBlankFragment --> LessonActivity.LessonLevel : fetches level state

    class CodePatternFragment {
        - question: String
        - correctAnswers: List<String>
        - textClue: String
        - wasAnswerCorrect: boolean
        - currentLessonLevel: int
        - options: List<String>
        - lessonGround: LinearLayout
        - submitButton: MaterialButton
        - feedbackView: TextView
        - lilitaFont: Typeface
        - selectedAnswers: List<String>
        - optionButtons: List<MaterialButton>
        - questionView: TextView
        + static newInstance(String, List<String>, List<String>, String, int): CodePatternFragment
        + onCreate(Bundle): void
        + onCreateView(LayoutInflater, ViewGroup, Bundle): View
        - setupUI(): void
        - updateQuestionView(): void
        - countBlanks(String): int
        - onSubmit(): void
        - getRoundedDrawable(int): GradientDrawable
    }
    CodePatternFragment --> LessonActivity : interacts
    CodePatternFragment --> LessonActivity.LessonLevel : fetches level state

    class OutOfSeedsFragment {
            - back_to_menu: Button
            + newInstance(): OutOfSeedsFragment
            + onCreateView(LayoutInflater, ViewGroup, Bundle): View
        }

    LessonActivity ..> OutOfSeedsFragment : creates
    OutOfSeedsFragment --> LessonActivity : interacts
    LessonActivity --> Memory : interacts

    class MultipleChoiceFragment {
        - question: String
        - correctAnswer: String
        - textClue: String
        - wasAnswerCorrect: boolean
        - currentLessonLevel: int
        - options: List<String>
        - lessonGround: LinearLayout
        - submitButton: MaterialButton
        - feedbackView: TextView
        - lilitaFont: Typeface
        - selectedAnswer: String[]
        - optionButtons: List<MaterialButton>
        - seedsCountView: TextView
        + static newInstance(String, List<String>, String, String, int): MultipleChoiceFragment
        + onCreate(Bundle): void
        + onCreateView(LayoutInflater, ViewGroup, Bundle): View
        - setupUI(): void
        - onSubmit(): void
        - getRoundedDrawable(int): GradientDrawable
    }
    MultipleChoiceFragment --> LessonActivity : interacts
    MultipleChoiceFragment --> LessonActivity.LessonLevel : fetches level state

    class LessonDoneFragment

    LessonDoneFragment --> LessonActivity : interacts
    LessonDoneFragment --> Memory : interacts

    class Prefabs {
        - cachedChapters: *
        + getDrawableIdByName(Context, String): int
        + getChapters(Context): *
        - loadChapters(Context): *
    }

    class ChapterData {
        + id: String
        + title: String
        + drawableRes: String
        + lessons: *
    }

    class LessonData {
        + id: String
        + title: String
        + description: String
        + seeds: int
        + difficulty: String
        + drawableRes: String
        + levels: *
    }

    class "Prefabs.LessonLevel" as PrefabsLessonLevel {
        + id: String
        + type: String
        + question: String
        + options: *
        + correctAnswer: String
        + answerList: *
        + textClue: String
    }

    SplashActivity ..> MainActivity : starts

    Prefabs o-- "1..*" ChapterData
    ChapterData o-- "1..*" LessonData
    LessonData o-- "1..*" PrefabsLessonLevel

    MainActivity ..> ChaptersFragment : starts
    ChaptersFragment --> MainActivity : restarts
    MainActivity --> Memory : contains
    LessonActivity --> LevelType : uses
    LessonActivity --> "1..*" LessonLevel : contains
    LessonLevel --> Rewards : contains
    LessonLevel --> LevelType : uses

    LessonActivity ..> MultipleChoiceFragment : creates
    LessonActivity ..> FillInTheBlankFragment : creates
    LessonActivity ..> CodePatternFragment : creates
    LessonActivity ..> LessonDoneFragment : creates
    LessonActivity ..> OutOfSeedsFragment : creates
    LessonActivity ..> Memory : accesses
    LessonActivity --> Prefabs : accesses
    MainActivity --> Prefabs : accesses
@enduml
